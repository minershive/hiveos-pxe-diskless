#!/bin/bash

BLACK='\033[0;30m'
DGRAY='\033[1;30m'
RED='\033[0;31m'
BRED='\033[1;31m'
GREEN='\033[0;32m'
BGREEN='\033[1;32m'
YELLOW='\033[0;33m'
BYELLOW='\033[1;33m'
BLUE='\033[0;34m'
BBLUE='\033[1;34m'
PURPLE='\033[0;35m'
BPURPLE='\033[1;35m'
CYAN='\033[0;36m'
BCYAN='\033[1;36m'
LGRAY='\033[0;37m'
WHITE='\033[1;37m'
NOCOLOR='\033[0m'

SCRIPT_PATH=`dirname $0`
cd $SCRIPT_PATH
mydir=`pwd`


### Some code for nvidia manipulation (check|list|download) based on nvidia-driver-update ^)


dist=$1
command=$2

LOG_FILE=`basename $0`.log
DIR=`pwd`/build/$dist/_fs
DIST_DIR=`pwd`/build/

kern_ver=`dpkg -I kernel/linux-image-*.deb | grep Package: |sed -r 's/.*linux-image-//'`
hiverepo=http://download.hiveos.farm/repo/binary
include="sudo,curl,wget,systemd,initramfs-tools,net-tools,pv,tar,xz-utils"

[[ -e server.conf ]] && source server.conf

function echo2() {
	name=`basename $0`
	pad=`echo -n "$1" | sed -e :a -e 's/^.\{1,45\}$/&./;ta'`
	echo -ne ${BCYAN}[$(date +'%d/%m/%Y %H:%M:%S')][${name^^}]${NOCOLOR} ${YELLOW}$pad${NOCOLOR}
}

function echo_ok() {
	echo -e "${GREEN}[OK]${NOCOLOR}"
}

function echo_fail() {
	echo -e "${RED}[FAIL]${NOCOLOR}"
	exit 1
}

function show_help() {
        echo "Avaliable dist for build:
  ubuntu18				Ubuntu 18.04
  ubuntu20				Ubuntu 20.04
  ubuntu22				Ubuntu 22.04
Usage:
  deploy_pxe <dist> --build		create latest Ubuntu 20.04 image
  deploy_pxe <dist> --selfupgrade	just upgrade Hive package and repack rootfs image
  deploy_pxe <dist> --upgrade		upgrade all and repack rootfs image
  deploy_pxe <dist> --chroot		chroot into rootfs (for manual actions)
  deploy_pxe <dist> --initrd		rebuild initramfs image
  deploy_pxe <dist> --remove		delete rootfs folder

Nvidia drivers:
  deploy_pxe nvidia --list		list available driver versions
  deploy_pxe nvidia --build <VER>	build driver specific version ( e.g. 515 or 515.105 or 515.105.01)

AMD OpenCL:
  deploy_pxe opencl --list		list available driver versions
  deploy_pxe opencl --build <VER>	build specific version (for now 5.4 only)
"
}


##NVIDIA PART
CUDA_VER=(
        12.2 535.54.03
        12.0 525.60.13
        11.8 520.56.06
        11.7 515.43.04
        11.6 510.39.01
)

function get_cuda_version() { # @driver_version, returns cuda_version
    local ver="$1"
    readarray -t ver_arr < <(echo -e "${ver//./$'\n'}\n0\n0")
    cuda_version=

    for (( i=1; i < ${#CUDA_VER[@]} ; i+=2 )); do
        readarray -t ref_arr < <(echo -e "${CUDA_VER[$i]//./$'\n'}\n0\n0")
            if [[ ${ver_arr[0]} -gt ${ref_arr[0]} ||
                ( ${ver_arr[0]} -eq ${ref_arr[0]} && ${ver_arr[1]#0} -gt ${ref_arr[1]#0} ) ||
                ( ${ver_arr[0]} -eq ${ref_arr[0]} && ${ver_arr[1]#0} -eq ${ref_arr[1]#0} && ${ver_arr[2]#0} -ge ${ref_arr[2]#0} ) ]]; then
                cuda_version=${CUDA_VER[$((i-1))]}
                return 0
            fi
    done

    return 1
}


function get_freespace() { # @silent
    local space=`df -k --output=avail $DRVPATH | tail -n 1 2>&1`
    [[ $space -ge $(( $MINFREEMB * 1024 )) ]] && return 0
    [[ -z "$1" ]] &&
        echo -e "" &&
        echo -e "${YELLOW}> Free space is less than ${WHITE}${MINFREEMB} MB${YELLOW} ($(( $space/1024 )) MB)${NOCOLOR}"
    return 1
}

function free_space() { # @url for package to keep
    get_freespace && return 0
    # step 1. try disk-expand
    disk-expand -s
    get_freespace 1 && return 0
    # step 2. remove some packages
    echo -e "${YELLOW}> Removing old driver packages${NOCOLOR}"
    remove_packages "$url"
    get_freespace 1 && return 0
    # step 3. clean ${DRVPATH} completely
    if [[ ! -z ${DRVPATH} && ${#DRVPATH} -gt 2 && -n "$(ls -A ${DRVPATH})" ]]; then
        echo -e ""
        echo -e "${YELLOW}> Removing everything from ${DRVPATH}${NOCOLOR}"
        rm -v -r --one-file-system ${DRVPATH}*
    fi
    get_freespace
    return $?
}

function list_packages() {
    get_versions
    if [[ $? -eq 0 ]]; then
        local last=
        local cuda=
        local incompat=
        [[ $force -ne 1 ]] && level=1 || level=2
        for drv in "${versions[@]}"
            do
                incompat=0
                [[ $incompat -ge $level ]] && continue
                get_cuda_version "$drv"
                if [[ "$cuda" != "$cuda_version" ]]; then
                    [[ ! -z $cuda ]] && echo ""
                        cuda="$cuda_version"
                        echo -e "${PURPLE}CUDA $cuda${NOCOLOR}"
                        last=
                fi
                    this="${drv%%.*}"
	    if [[ "$this" > "500" ]]; then
                if [[ "$last" != "$this" || -z "$last" ]]; then
                    [[ ! -z "$last" ]] && echo -e ""
        	        last="$this"
            	        echo -ne "  ${WHITE}$this${NOCOLOR}"
                fi

                if [[ "$current_version" == "$drv" ]]; then
                    echo -ne "      ${BGREEN}$drv${NOCOLOR}"
                elif [[ $incompat -ne 0 ]]; then
                    echo -ne "      ${RED}$drv${NOCOLOR}"
                elif [[ -f "${DRVPATH}${DRVPATTERN}${drv}.run" ]]; then
                    echo -ne "      ${CYAN}$drv${NOCOLOR}"
                else
                    echo -ne "      $drv"
                fi
	    fi
                done
                echo ""
        fi

    get_stable

    local files
    readarray -t files < <(realpath ${DRVPATH}NVIDIA-Linux* | grep -oP "$DRVREGEXP" | sort -V)
    [[ ${#files[@]} -eq 0 ]] && return 0
    echo -en "${CYAN}> Downloaded packages -"
    for drv in "${files[@]}"
        do
            local basename=`basename "$drv"`
            echo -en " $basename "
        done
    echo -e "${NOCOLOR}"
}

function check_package() { # @filename
    #local basename=`basename $1`
    [[ ! -f "${DRVPATH}$1" ]] && return 1
    #echo -e ""
    echo2 "Checking package integrity" && echo ""
    local exitcode=1
    # check size. zero file exits with 0
    local size=`stat -c %s "${DRVPATH}$1"`
    if [[ $size -gt 1000 ]]; then
        chmod +x "${DRVPATH}$1"
        "${DRVPATH}$1" --check
        exitcode=$?
    fi
    [[ $exitcode -ne 0 ]] && echo -e "${RED}> Check failed${NOCOLOR}"
    return $exitcode
}

function get_url() { # @version or @url, returns $url and $url_tesla
    url_tesla=
    # latest stable
    if [[ -z "$1" ]]; then
        get_latest || return $?
        url="${DRVURL}${DRVPATTERN}${latest_version}.run"
    # 440.95.01 & 123.45 formats
    elif [[ "$1" =~ ^[0-9]{3}\.[0-9]{2,3}\.[0-9]{2}$ || "$1" =~ ^[0-9]{3}\.[0-9]{2,3}$ ]]; then
        local last=
        get_versions
        if [[ $? -eq 0 ]]; then
            for drv in "${versions[@]}"
                do
                    [[ "$drv" == "$1" || "${drv%.*}" == "$1" ]] && last="$drv" && break
            done
        fi
        if [[ ! -z "$last" ]]; then
            url="${DRVURL}${DRVPATTERN}${last}.run"
        else
            echo -e "${YELLOW}> ${WHITE}$1${YELLOW} was not found in the list. Trying to get it from NVIDIA${NOCOLOR}"
            url="${DRVNVIDIAURL}$1/${DRVPATTERN}$1.run"
            [[ "$1" =~ ^[0-9]{3}\.[0-9]{2,3}\.[0-9]{2}$ ]] &&
            url_tesla="https://uk.download.nvidia.com/tesla/$1/${DRVPATTERN}$1.run"
        fi
    # 123 format
    elif [[ "$1" =~ ^[0-9]{3}$ ]]; then
        get_versions || return $?
        local last=
        for drv in "${versions[@]}"
            do
                [[ "${drv%%.*}" == "$1" ]] && last="$drv" && continue
                [[ ! -z "$last" ]] && break
        done
        [[ -z "$last" ]] && echo -e "${RED}> Unable to find latest driver version for $1 series${NOCOLOR}" && return 1
        echo2 "Latest driver for $1 series - ${WHITE}$last${NOCOLOR}" && echo ""
        url="${DRVURL}${DRVPATTERN}${last}.run"
    # url
    else
        url="$1"
    fi
    [[ -z "$url" ]] && return 1
    return 0
}

function get_package() { # @url or @file, returns $package
    local exitcode=0
    local url="$1"

    package=`basename "$url"`
    [[ -z "$package" ]] && echo -e "${RED}> No file name in $url${NOCOLOR}" && return 1

    # check if file already exists and it is good
    local exist=0
    if [[ -f "${DRVPATH}$package" ]]; then
        echo -e ""
        echo2 "Driver package already exists" && echo ""
        check_package "$package" && return 0
        exist=1
    fi

    # local file
    if [[ "$url" != ftp* && "$url" != http* ]]; then
        #[[ ! -f $url ]] &&  echo -e "${RED} Unable to get from $url" && return 1
        realpath=`realpath "$url"`
        [[ "$realpath" == "${DRVPATH}$package" ]] && return 1
        cp "$url" "${DRVPATH}$package"
        [[ $? -ne 0 ]] && echo -e "${RED}> Unable to get file from - ${WHITE}$url${NOCOLOR}" && return 1
        check_package "$package"
        return $?
    fi

    for i in {1..2}; do
        # download file. resume if exists
        echo -e ""
        echo -e "${CYAN}> Downloading - ${WHITE}$url${NOCOLOR}"
        [ ! -t 1 ] && verb="-nv" # reduce log in non-interactive mode
        wget $verb --no-check-certificate -T $TIMEOUT -t $RETRY -c -P ${DRVPATH} $url 2>&1
        exitcode=$?
        [[ $exitcode -ne 0 ]] && echo -e "${RED}> Download error ($exitcode)${NOCOLOR}" && return $exitcode

        # check it again
        check_package "$package" && return 0

        # if file existed before, delete it and try download again. it would help if it was already broken
        [[ $exist -eq 0 ]] && return 1
        echo -e ""
        echo -e "${YELLOW}> File is broken. Deleting it and downloading again${NOCOLOR}"
        unlink "${DRVPATH}$package"
        exist=0
    done
}

versions=()
function get_versions() { # returns $versions
    [[ ${#versions[@]} -gt 0 ]] && return 0
    echo2 "Loading drivers list${NOCOLOR}"
    local list=
    if [[ "$DRVURL" == "$DRVNVIDIAURL" ]]; then
        list=`curl -sLk --connect-timeout $TIMEOUT --retry $RETRY $DRVNVIDIAURL` &&
        readarray -t versions < <(echo "$list" | grep -oP "\>\K[0-9]+\.[0-9\.]+" | sort -u -V)
    else
        list=`curl -sLk --connect-timeout $TIMEOUT --retry $RETRY $DRVURL` &&
        readarray -t versions < <(echo "$list" | grep -oP "$DRVREGEXP" | sort -u -V)
    fi
    [[ ${#versions[@]} -eq 0 ]] && echo -e "${RED}Failed${NOCOLOR}" && return 1
    echo -e "${GREEN}${#versions[@]}${NOCOLOR}"
    return 0
}


function get_stable() { # returns $stable_version
    echo -en "${WHITE}> Stable version - ${NOCOLOR}"
    if [[ "$DRVURL" == "$DRVNVIDIAURL" ]]; then
        local list=`curl -sLk --connect-timeout $TIMEOUT --retry $RETRY ${DRVNVIDIAURL}latest.txt`
    else
        local list=`curl -sLk --connect-timeout $TIMEOUT --retry $RETRY ${DRVURL}VERSIONS.txt`
    fi
    [[ -z "$list" ]] && echo -e "${RED}Failed${NOCOLOR}" && return 1
    stable_version=`echo "$list" | grep -oP "$DRVREGEXP" | tail -n 1`
    [[ -z "$stable_version" ]] && echo -e "${RED}Error${NOCOLOR}" && return 2
    get_cuda_version "$stable_version" &&
        echo -e "${WHITE}${stable_version} ${PURPLE}(CUDA $cuda_version)${NOCOLOR}" ||
        echo -e "${WHITE}${stable_version}${NOCOLOR}"
    return 0
}

function build_driver() { # @url or @file, @force_install
    # it must exist
#    [[ ! -d ${DRVPATH} ]] && mkdir ${DRVPATH}

    get_url "$1" || return $?

    # check compatibility
    local ver=`echo "$url" | grep -oP "${DRVREGEXP}"`
    # check avaliable space and try to get some
    free_space "$url"
    [[ $? -ne 0 ]] && echo -e "${RED}> Not enough free space to continue${NOCOLOR}" && return 1
    
    get_package "$url" || return $?

    #cd $DRVPATH
    export TMPDIR=$DRVPATH
    local basename=`basename $package`
    local base_pkg=${DRVPATH}$basename
    local build_dir=${DRVPATH}nvidia-$ver
    [[ ! -d ${build_dir} ]] && mkdir -p ${build_dir}
    [[ ! -d hiveramfs/nvidia ]] && mkdir -p hiveramfs/nvidia
    # this check is redundant
    [[ ! -f "$base_pkg" ]] && echo -ne "${RED}> $basename not found in ${DRVPATH}${NOCOLOR}" && return 1
    #check_package "$basename"

    #Extract Driver
    echo2 "Extract $basename..."
    [[  -d ${DRVPATH}${ver} ]] && rm -rf ${DRVPATH}${ver}
    cd ${DRVPATH} && sh $basename --extract-only --target $ver > /dev/null 2>&1
    [[ $? -ne 0 ]] && echo $? && echo -ne "${RED}> Failed to extract driver $basename${NOCOLOR}" && echo_fail
    echo_ok

    #Build from source
    echo2 "Build NVIDIA-$ver (`nproc` CPU cores)..."
    mkdir -p $mydir/$build_dir/usr/lib/modules/$kern_ver/kernel/drivers/video
    cd ${ver}/kernel/ && make -j `nproc` SYSSRC=$mydir/build/_kernel/$kern_ver/usr/src/linux-headers-$kern_ver/ M=$PWD IGNORE_CC_MISMATCH='1' > $mydir/${DRVPATH}make-$ver.log 2>&1
    [[ $? -ne 0 ]] && echo -e "${RED}> Failed to build driver.${NOCOLOR}" && echo_fail
    echo_ok
    echo2 "Copy driver files..."
    find . -type f -name "*.ko" -exec cp -r "{}" $mydir/$build_dir/usr/lib/modules/$kern_ver/kernel/drivers/video \;
    [[ $? -ne 0 ]] && echo -e "${RED}> Failed to copy driver files.${NOCOLOR}" && echo_fail
    echo_ok
    #Copy libs 
    echo2 "Copy lib files..."

    mkdir -p $mydir/$build_dir/usr/local/lib/nvidia
    mkdir -p $mydir/$build_dir/usr/local/lib/xorg/modules/drivers
    mkdir -p $mydir/$build_dir/usr/local/bin
    mkdir -p $mydir/$build_dir/etc/{ld.so.conf.d,modprobe.d}
    mkdir -p $mydir/$build_dir/usr/lib/firmware/nvidia/$ver
    mkdir -p $mydir/$build_dir/etc/OpenCL/vendors

    cd $mydir/$build_dir/usr/local/lib/nvidia
    for file in libcuda.so libnvidia-opencl.so libnvidia-ml.so libnvidia-allocator.so libnvidia-cfg.so libnvidia-fbc.so libnvidia-gtk2.so libnvidia-gtk3.so libnvidia-ptxjitcompiler.so libnvidia-nvvm.so ; do
	cp -r $mydir/${DRVPATH}${ver}/$file.$ver .
	ln -s $file.$ver $file
	ln -s $file.$ver $file.1
	[[ $? -ne 0 ]] && echo -e "${RED}> Failed to copy lib files.${NOCOLOR}" && echo_fail
    done

    for file in nvidia-persistenced nvidia-settings nvidia-smi ; do
	cp -r $mydir/${DRVPATH}${ver}/$file $mydir/$build_dir/usr/local/bin
    done
    echo "options nvidia_drm modeset=1" > $mydir/$build_dir/etc/modprobe.d/nvidia.conf
    echo "/usr/local/lib/nvidia" > $mydir/$build_dir/etc/ld.so.conf.d/nvidia.conf
    cp -r $mydir/${DRVPATH}${ver}/nvidia.icd $mydir/$build_dir/etc/OpenCL/vendors
    cp -r $mydir/${DRVPATH}${ver}/firmware/*.bin $mydir/$build_dir/usr/lib/firmware/nvidia/$ver
    cp -r $mydir/${DRVPATH}${ver}/nvidia_drv.so $mydir/$build_dir/usr/local/lib/xorg/modules/drivers 
    echo_ok
    cd $mydir
    
    #Create archive 
    echo2 "Create archive..."
    tar -C $mydir/$build_dir -cpf - . | pixz -9 -e > $mydir/$build_dir.tar.xz
    [[ $? -ne 0 ]] && echo_fail || echo_ok

    #Clear folders
    rm -rf $mydir/$build_dir
    rm -rf $mydir/${DRVPATH}$basename
    rm -rf $mydir/${DRVPATH}$ver
    ln -sf $mydir/$build_dir.tar.xz hiveramfs/nvidia/
    echo2 "${GREEN}Driver build successful${NOCOLOR}"
    echo ""
}



mount_need() {
    echo2 "Mount needed folders (dev|proc|run|sys)..."
    mount --bind /proc ${DIR}/proc
    mount --bind /sys  ${DIR}/sys
    mount --bind /dev  ${DIR}/dev
    mount --bind /run  ${DIR}/run
    echo_ok
}

umount_need() {
    echo2 "Umount needed folders (dev|proc|run|sys)..."
    umount ${DIR}/proc
    umount ${DIR}/sys
    umount ${DIR}/run
    umount ${DIR}/dev
    echo_ok

}

create_initrd() {
    echo2 "Copy initramfs config..."
    cp -r configs/initramfs-tools/* ${DIR}/etc/initramfs-tools/
    echo_ok
    echo2 "Create initramfs image..."
    #kern_ver=$(basename ${DIR}/lib/modules/*)
    chroot ${DIR} mkinitramfs -c xz -o /boot/initrd-ram.img ${kern_ver}
    echo_ok
    echo2 "Create symlink..."
    mkdir -p build/$dist/boot
    cp -r ${DIR}/boot/initrd-ram.img build/$dist/boot/initrd-ram.img
    cp -r ${DIR}/boot/vmlinuz-${kern_ver}  build/$dist/boot/vmlinuz
    [[ ! -d $mydir/hiveramfs/boot ]] && mkdir -p $mydir/hiveramfs/boot
    rm -rf $mydir/hiveramfs/boot/$dist && ln -sf $mydir/build/$dist/boot/vmlinuz $mydir/hiveramfs/boot/$dist
    rm -rf $mydir/hiveramfs/boot/$dist.img && ln -sf $mydir/build/$dist/boot/initrd-ram.img $mydir/hiveramfs/boot/$dist.img
    echo_ok
}

list_opencl() {
echo "Not implemented yet."
}
build_opencl() {
	[[ "$#" -eq 0 ]] && local ver=$DEFAULT_OCL_VER || local ver=$1
	[[ ! -d $mydir/build/opencl/_$ver ]] && mkdir -p $mydir/build/opencl/_$ver
	echo2 "Download AMDGPU/ROCm ($ver) libs..."
	curl -s $HIVE_REPO_URL/amd-ocl/hive-rocm-5.4_5.4.6_amd64.deb |dpkg -x - $mydir/build/opencl/_$ver
	curl -s $HIVE_REPO_URL/amd-ocl/hive-amdgpu-5.4_5.4.6_amd64.deb |dpkg -x - $mydir/build/opencl/_$ver
	[[ $? -ne 0 ]] && echo_fail || echo_ok
	echo2 "Create archive amd-opencl-$ver.tar.xz..."
	tar -C $mydir/build/opencl/_$ver -cpf - . | pixz -9 -e > $mydir/build/opencl/amd-opencl-$ver.tar.xz
	[[ $? -ne 0 ]] && echo_fail || echo_ok
	echo2 "Remove tmp folder..."
	rm -rf $mydir/build/opencl/_$ver
	[[ $? -ne 0 ]] && echo_fail || echo_ok
	echo2 "Create symlink..."
	ln -sf ../build/opencl/amd-opencl-$ver.tar.xz $mydir/hiveramfs/
	[[ $? -ne 0 ]] && echo_fail || echo_ok
}

remove_opencl() {
echo "Not implemented yet."
}
case $dist in
    ubuntu18)
	suite=bionic
	repo=http://archive.ubuntu.com/ubuntu/
	echo -e "${RED} Ubuntu 18.04 ($suite) image is deprecated.${NOCOLOR}"
	show_help
	exit 1
	;;
    ubuntu20)
	suite=focal
	#repo=http://archive.ubuntu.com/ubuntu/
	repo="mirror://mirrors.ubuntu.com/mirrors.txt"
	LOG_FILE="build-${suite}.log"
	shift
	;;
    ubuntu22)
	suite=jammy
	repo="mirror://mirrors.ubuntu.com/mirrors.txt"
	LOG_FILE="build-${suite}.log"
	shift
	;;
    debian12)
	suite=bookworm
	repo=http://deb.debian.org/debian/
	LOG_FILE="build-${suite}.log"
	shift
	;;
    nvidia)
	DOWNLOAD_URL=http://download.hiveos.farm
	DRVURL=$DOWNLOAD_URL/drivers/
	DRVPATH=build/nvidia/
	TIMEOUT=10
	RETRY=3
	MINFREEMB=700
	#mkdir -p build/$dist
	DRVPATTERN="NVIDIA-Linux-x86_64-"
	DRVREGEXP="${DRVPATTERN}\K[0-9\.]+(?=\.run)"
	DRVNVIDIAURL="https://download.nvidia.com/XFree86/Linux-x86_64/"
	LOG_FILE="nvidia.log"
	shift
	case $1 in
	--list)
		list_packages
		exit 0
		;;
	--build)
		extract_kernel
		shift
		build_driver "$1"
		exit $?
		;;
	*)
		show_help
		exit 1
		;;
	esac
	;;
    opencl)
	shift
	case $1 in
	    --list)
		list_opencl
		exit $?
		;;
	    --build)
		shift
		build_opencl $1
		exit $?
		;;
	    --remove)
		shift
		remove_opencl $1
		exit $?
		;;
	    *)
		show_help
		;;
	esac
	;;
    *)
	show_help
	exit 1
	;;
esac

create_fstab() {
tee  ${DIR}/etc/fstab > /dev/null <<EOT
EOT

}

create_fs() {
    mkdir -p ${DIR}
	if [[ ! -e ${DIR}/boot/debootstrap ]]; then
	    echo2 "Create Root Filesystem..."
	    cc=`whois $(curl -s ifconfig.me) | grep -iE ^country: | awk '{print tolower($2)}'|tr -d '\n'`
	    [[ ! -z $cc ]] && url="http://$cc.archive.ubuntu.com/ubuntu/" || url="http://archive.ubuntu.com/ubuntu/"
	    debootstrap --arch=amd64 --include=$include $suite $DIR $url &>$LOG_FILE
	    [[ $? -ne 0 ]] && echo_fail
	    touch ${DIR}/boot/debootstrap
	    echo_ok
	else
		echo "" 
		echo -e "${RED}RootFS on $dist already exists.
		${YELLOW}Try to use 
		    ${CYAN}$(basename $0) ${CYAN}$dist --upgrade ${YELLOW}to upgrade the existing rootfs
		or
		    ${CYAN}$(basename $0) $dist --remove ${YELLOW}to remove them.
		And then re-launch 
		    ${CYAN}$(basename $0) $dist --build${NOCOLOR}"
		echo ""
		exit 1
	fi
}

remove_fs() {
	
	local remove=n
	if [[ -d $DIST_DIR ]]; then
		echo -n "Do you want to remove $dist [Y/n]? "
		read rem
		[[ ! -z $rem ]] && remove=$(echo ${rem,,} | cut -c 1)
		[[ $remove == "y" ]] && rm -rf $DIST_DIR/$dist
	fi
}

configure_fs() {
    echo2 "Configure FS..."
    chroot $DIR mkdir -p /hive-config
    rm ${DIR}/etc/systemd/system/getty.target.wants/getty@tty1.service
    chroot ${DIR} useradd -m -p 1 -s /bin/bash user

    echo root:hunter2 | sudo chpasswd -c SHA256 -R $DIR
    echo user:1 | sudo chpasswd -c SHA256 -R $DIR

    chroot $DIR adduser user sudo &>>$LOG_FILE
    
    chroot $DIR systemctl enable systemd-networkd &>>$LOG_FILE
    chroot $DIR systemctl enable systemd-resolved &>>$LOG_FILE
    echo "nameserver 127.0.0.53" > $DIR/etc/resolv.conf
    #Need for loadable custom modules
    echo "/sbin/depmod" >>  $DIR/lib/lsb/init-functions
    echo "/sbin/ldconfig" >>  $DIR/lib/lsb/init-functions
    echo "blacklist amdgpu" > $DIR/etc/modprobe.d/blacklist-amdgpu.conf
    
    echo "user ALL=(ALL) NOPASSWD:ALL" >> $DIR/etc/sudoers
    sed -i 's|Defaults	secure_path|#Defaults	secure_path|' $DIR/etc/sudoers
    echo "SELECTED_EDITOR="/usr/bin/mcedit"" >  $DIR/home/user/.selected_editor
    echo "SELECTED_EDITOR="/usr/bin/mcedit"" >  $DIR/root/.selected_editor
    echo "motd" >> $DIR/home/user/.profile
    echo "sudo -s" >> $DIR/home/user/.profile
    echo_ok
}

add_apt() {
    echo2 "Add repo source.list..."
tee  ${DIR}/etc/apt/apt.conf.d/99norecommend > /dev/null << EOT
APT::Install-Recommends "0";
APT::Install-Suggests "0";
EOT

cp -r configs/hive.gpg $DIR/etc/apt/trusted.gpg.d/hiverepo.gpg
echo "deb $hiverepo /" > $DIR/etc/apt/sources.list.d/hiverepo.list

if [[ $dist == "ubuntu20" || $dist == "ubuntu22" ]]; then

tee $DIR/etc/apt/sources.list > /dev/null <<EOT
deb $repo $suite main restricted
deb $repo $suite-updates main restricted
deb $repo $suite universe
deb $repo $suite-updates universe
deb $repo $suite multiverse
deb $repo $suite-updates multiverse
deb $repo $suite-backports main restricted universe multiverse

deb http://security.ubuntu.com/ubuntu $suite-security main restricted
deb http://security.ubuntu.com/ubuntu $suite-security universe
deb http://security.ubuntu.com/ubuntu $suite-security multiverse
EOT

else

tee $DIR/etc/apt/sources.list > /dev/null <<EOT
deb $repo $suite main contrib non-free
deb $repo $suite-updates main contrib non-free

deb http://security.debian.org/debian-security $suite-security main contrib non-free
EOT
fi
    echo_ok
}

upgrade_fs() {
    echo2 "Upgrade FS..."

    chroot $DIR apt -y update &>>$LOG_FILE
    [[ $? -ne 0 ]] && echo_fail
    pkg=`chroot $DIR apt list --upgradable 2>&1 | grep '^hive' -c`
    chroot $DIR apt -y upgrade &>>$LOG_FILE
    [[ $? -ne 0 ]] && echo_fail || echo_ok
    if [[ ! $1 ]]; then
        echo2 "Touch RepoVer..."
        [[ $pkg -gt 0 ]] && chroot $DIR /hive/bin/repover-touch
        sync && echo_ok
    fi
}

install_add(){
    echo2 "Install additional packages..."
    chroot $DIR apt -y install mc busybox-static libnuma1 psmisc x11-xkb-utils gettext-base \
				pciutils dmidecode locales-all &>>$LOG_FILE
    [[ $? -ne 0 ]] && echo_fail || echo_ok
    echo2 "Compile locales..."
    chroot $DIR apt -y install locales &>>$LOG_FILE
    chroot $DIR locale-gen en_US.UTF-8 &>>$LOG_FILE
    chroot $DIR update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8 &>>$LOG_FILE
    [[ $? -ne 0 ]] && echo_fail || echo_ok

    echo2 "Install rtl_nic firmwares ..."
    mkdir -p $DIR/lib/firmware/updates/rtl_nic/
    curl -s  https://kernel.googlesource.com/pub/scm/linux/kernel/git/firmware/linux-firmware.git/+archive/refs/heads/main/rtl_nic.tar.gz | tar xfz - -C $DIR/lib/firmware/updates/rtl_nic/
    echo_ok

}

upgrade_hive() {
	echo2 "Upgrade Hiveon..."

	chroot $DIR apt -y update &>>$LOG_FILE
	[[ $? -ne 0 ]] && echo_fail
	pkg=`chroot $DIR apt list --upgradable 2>&1 | grep '^hive' | tr '/' ' ' | awk '{print $1}' | sort -V`
	if [[ ! -z $pkg ]]; then
		chroot $DIR apt -y install $pkg  &>>$LOG_FILE
		[[ $? -eq 0 ]] && chroot $DIR /hive/bin/repover-touch
	fi
	echo_ok
}

install_pkg() {
	echo2 "Install Hiveon package..."
#	chroot $DIR locale-gen en_US en_US.UTF-8 > /dev/null 2>&1
#	chroot $DIR update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8 > /dev/null 2>&1
	chroot $DIR apt -y install hive  &>>$LOG_FILE
	chroot $DIR ln -sf /hive/etc/pci.ids /usr/share/misc/pci.ids
	chroot $DIR /hive/bin/repover-touch
	#chroot $DIR apt -y install hive-amdgpu-5.4 hive-rocm-5.4 &>>$LOG_FILE
	echo_ok
}

install_kernel(){
    echo2 "Install linux kernel..."
    mkdir -p $DIR/kernel/
    mkdir -p build/_kernel/$kern_ver
    cp -r kernel/*.deb $DIR/kernel/
    for file in $DIR/kernel/*; do 
	chroot $DIR dpkg -i /kernel/`basename $file` &>>$LOG_FILE
	dpkg -x kernel/`basename $file` build/_kernel/$kern_ver/ &>>$LOG_FILE
    done
    echo_ok
}

extract_kernel(){
    echo2 "Extract linux kernel..."
    mkdir -p $DIR/kernel/
    mkdir -p build/_kernel/$kern_ver
    for file in kernel/*; do 
	dpkg -x kernel/`basename $file` build/_kernel/$kern_ver/ &>>$LOG_FILE
    done
    echo_ok
}

clean_apt() {
	echo2 "Clean FS..."
	chroot ${DIR} apt clean
	rm -rf ${DIR}/usr/share/locale/*
	rm -rf ${DIR}/usr/share/doc/*
	rm -rf ${DIR}/lib/udev/hwdb.bin
	rm -rf ${DIR}/hive-drivers-pack/NVIDIA*
	rm -rf ${DIR}/kernel/
	echo_ok
}

deploy_fs() {
	local dir_size=`du -hsm $DIR | awk '{print $1}' | tr -d '\r\n'`
	local filepath=build/$dist/$dist.tar.xz
	echo2 "Directory size: ${dir_size}M" && echo_ok

	echo2 "Saving to $filepath ..."
	tar -C $DIR --exclude='boot/*' --exclude='usr/src/*' --exclude='dev/*' -cpf - . | pixz -9 -e > $filepath
	[[ $? -ne 0 ]] && echo_fail || echo_ok
	    echo2 "Create symlink ..."
	    rm -rf hiveramfs/$dist.tar.xz && ln -s ../$filepath hiveramfs/$dist.tar.xz
	[[ $? -ne 0 ]] && echo_fail || echo_ok
	
}

echo ""
echo ""



#if [[ $dist == "nvidia" ]]; then
#	case $1 in
#	--list)
#		list_packages
#		exit 0
#		;;
#	--build)
#		extract_kernel
#		shift
#		build_driver "$1"
#		exit $?
#		;;
#	*)
#		show_help
#		exit 1
#		;;
#	esac
#fi

case $1 in
    --initrd)
	create_initrd
	exit $?
	;;
    --umount)
	umount_need
	exit $?
	;;
    --upgrade)
	mount_need
	upgrade_fs
	clean_apt
	umount_need
	deploy_fs
	exit $?
	;;
    --selfupgrade)
	mount_need
	upgrade_hive
	clean_apt
	umount_need
	deploy_fs
	exit $?
	;;
    --chroot)
	mount_need
	chroot $DIR
	umount_need
	exit $?
	;; 
    --build)
	create_fs
	mount_need
	add_apt
	upgrade_fs 1
	install_add
	configure_fs
	install_pkg
	install_kernel
	create_initrd
	clean_apt
	umount_need
	deploy_fs
	;;
    --remove)
	remove_fs
	;;
    *)
	show_help
	exit 1
esac


